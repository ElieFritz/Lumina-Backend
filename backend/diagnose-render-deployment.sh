#!/bin/bash

# Script de diagnostic complet pour le d√©ploiement Render
echo "üîç Diagnostic complet du d√©ploiement Render"
echo "=========================================="

echo "üìã Informations du projet:"
echo "- Project ID: prj-d36reom3jp1c73bfr25g"
echo "- Dashboard: https://dashboard.render.com/project/prj-d36reom3jp1c73bfr25g"
echo ""

echo "üåê V√©rification de la connectivit√© Render..."
if curl -s --max-time 10 https://render.com > /dev/null; then
    echo "‚úÖ Render.com accessible"
else
    echo "‚ùå Probl√®me de connectivit√© avec Render.com"
fi

echo ""
echo "üìä V√©rification des changements r√©cents..."
echo "Derniers commits:"
git log --oneline -5

echo ""
echo "üîß Configuration actuelle:"
echo "Build Command: npm install && npm run build"
echo "Start Command: node index.js"
echo "Root Directory: backend"
echo "Health Check Path: /api/health"
echo ""

echo "üìÅ V√©rification des fichiers de d√©ploiement..."
if [ -f "index.js" ]; then
    echo "‚úÖ index.js pr√©sent"
else
    echo "‚ùå index.js manquant"
fi

if [ -f "dist/main.js" ]; then
    echo "‚úÖ dist/main.js pr√©sent"
else
    echo "‚ùå dist/main.js manquant - compilation n√©cessaire"
    echo "Ex√©cution de npm run build..."
    npm run build
fi

if [ -f "render.yaml" ]; then
    echo "‚úÖ render.yaml pr√©sent"
    echo "Contenu de render.yaml:"
    cat render.yaml
else
    echo "‚ùå render.yaml manquant"
fi

echo ""
echo "üß™ Test local de l'application..."
echo "D√©marrage de l'application en arri√®re-plan..."

# Arr√™ter tout processus existant sur le port 3001
pkill -f "node index.js" 2>/dev/null || true
sleep 2

# D√©marrer l'application
node index.js &
APP_PID=$!

# Attendre que l'application d√©marre
sleep 5

# Tester l'endpoint de sant√©
echo "Test de l'endpoint de sant√© local..."
HEALTH_RESPONSE=$(curl -s http://localhost:3001/api/health 2>/dev/null)

if [ $? -eq 0 ] && echo "$HEALTH_RESPONSE" | grep -q "ok"; then
    echo "‚úÖ Application locale fonctionnelle"
    echo "üìä R√©ponse: $HEALTH_RESPONSE"
else
    echo "‚ùå Probl√®me avec l'application locale"
    echo "üìä R√©ponse: $HEALTH_RESPONSE"
fi

# Arr√™ter l'application
kill $APP_PID 2>/dev/null
echo "üõë Application locale arr√™t√©e"

echo ""
echo "üìã Instructions pour le d√©ploiement Render:"
echo "1. Allez sur https://dashboard.render.com/project/prj-d36reom3jp1c73bfr25g"
echo "2. V√©rifiez que le service 'lumina-africa-backend' existe"
echo "3. Si le service n'existe pas:"
echo "   - Cliquez sur 'New +' ‚Üí 'Web Service'"
echo "   - Connectez le repository GitHub 'Lumina'"
echo "   - Configurez les param√®tres selon render.yaml"
echo "4. Si le service existe, v√©rifiez les logs de d√©ploiement"
echo "5. Notez l'URL du service d√©ploy√©"

echo ""
echo "üîç V√©rification des logs Render:"
echo "1. Dans le dashboard Render, cliquez sur votre service"
echo "2. Allez dans l'onglet 'Logs'"
echo "3. V√©rifiez s'il y a des erreurs de d√©ploiement"
echo "4. Recherchez des messages comme:"
echo "   - 'Build successful'"
echo "   - 'Deploy successful'"
echo "   - 'Application started'"

echo ""
echo "üö® Probl√®mes courants et solutions:"
echo "1. Si 'Build failed': V√©rifiez les d√©pendances dans package.json"
echo "2. Si 'Start failed': V√©rifiez que index.js et dist/main.js existent"
echo "3. Si 'Health check failed': V√©rifiez que /api/health r√©pond"
echo "4. Si 'Port already in use': V√©rifiez la configuration du port"

echo ""
echo "‚úÖ Diagnostic termin√©!"
